// 정수형 공간의 동적 할당 및 반환
#include <iostream>
using namespace std;

int main()
{
    int *p;

    p = new int;

    // p가 NULL 이면 메모리 할당 실패
    if (!p)
    {
        cout << "메모리를 할당할 수 없습니다.";
        return 0;
    }

    *p = 5;
    int n = *p;
    cout << "*p = " << *p << endl;
    cout << "n = " << n << endl;

    // 할당 받은 메모리 반환
    delete p;
}

/*
*p = 5
n = 5

- 동적 메모리 할당 및 반환
C언어 에서는 동적 메모리 할당 및 반환을 위해 malloc() / free() 표준 C 함수 이용
C++ 에서는 동적 메모리 할당 및 반환을 위해 new 와 delete 연산자를 이용한다
new 연산자는 힙 공간으로부터 메모리를 할당,
delete 연산자는 할당받은 메모리를 힙으로 반환한다

데이터 타입 * 포인터변수 = new 데이터타입;
delete 포인터변수;

new 연산자는 '데이터타입'의 크기만큼 힙으로부터 메모리를 할당받고 주소를 리턴한다
'포인터변수'는 할당받은 메모리의 주소를 가진다

delete 연산자는 '포인터변수'가 가리키는 메모리를 힙으로 반환한다
'데이터타입'은 int, double, char 등 기본 타입 뿐 아니라 구조체, 클래스도 포함한다

힙 메모리가 부족하면 new 는 NULL 을 리턴하므로, NULL 검사하는 것이 좋다

- 동적 할당 메모리 초기화
new 를 이용하여 메모리를 할당받을 때, 초깃값을 지정하여 초기화할 수 있다
데이터타입 *포인터변수 = new 데이터타입(초깃값);

- delete 사용 시 주의
delete 로 메모리를 반환할 때 적절하지 못한 포인터를 사용하면, 실행 오류가 발생한다
*/